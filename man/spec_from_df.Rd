% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data-types.R
\name{spec_from_df}
\alias{spec_from_df}
\title{Create a \link[readr]{cols} specification from a dataframe.}
\usage{
spec_from_df(df)
}
\arguments{
\item{df}{A dataframe with column names \code{col_name} and \code{col_type}.}
}
\value{
A \link[readr]{cols} specification.
}
\description{
Given a dataframe with columns named \code{col_name} and \code{col_type},
construct a \link[readr]{cols} specification.
}
\details{
This allows one to create a \link[readr]{cols} specification from an existing
dataframe.  Executing \link{types_df} on a dataframe will return a new
dataframe containing the column names and types needed to create a
\link[readr]{cols} specification.

The inverse operation is \link{spec_to_df}.
}
\examples{
## create an artificial df
test_df <- readr::read_csv(paste0("a,b,c,d\\n",
                                  "1,two,3.0,2016-05-01T11:40:44\\n",
                                  "4,five,6.0,2014-12-01T06:12:23"))

## write the spec to disk as a mere CSV
spec_df <- spec_to_df(readr::spec(test_df))
tmp_dir <- tempdir()
readr::write_csv(spec_df,
                 file.path(tmp_dir, "test_df_spec.csv"))
readr::write_csv(test_df,
                 file.path(tmp_dir, "test_df.csv"))

## create a specification and then read original CSV back in
spec_df_from_csv <- readr::read_csv(file.path(tmp_dir, "test_df_spec.csv"))
spec_from_csv <- spec_from_df(spec_df_from_csv)
test_df_from_csv <- readr::read_csv(file.path(tmp_dir, "test_df.csv"),
                                    col_types = spec_from_csv)
## returns TRUE
assertthat::are_equal(test_df, test_df_from_csv)

}

