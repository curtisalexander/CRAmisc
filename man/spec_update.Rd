% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data-types.R
\name{spec_update}
\alias{spec_update}
\title{Update a readr column specification.}
\usage{
spec_update(col_spec, col_spec_df)
}
\arguments{
\item{col_spec}{A \link[readr]{cols} specification.  Most commonly produced
as part of a call to \link[readr]{read_csv}.}

\item{col_spec_df}{A dataframe containing the column name and type to update
within the specification.  The expectation is that \code{col_spec_df} has
columns named \code{col_name} and \code{col_type}.  If \code{col_spec_df}
has columns named differently, this is easy to convert using
\link[dplyr]{rename}.}
}
\value{
A copy of the original specification with updated column types.
}
\description{
Given a \link[readr]{cols} specification, update the specification in place
by explicitly declaring the appropriate type in a dataframe.
}
\details{
This is of value when importing an extremely wide dataframe with many
columns.  It may not make sense to explicitly declare the type of every
column by hand.  Nor should one have to copy/paste an exisiting column
specification into a text editor in order to update the specification.

A final use case is when problems occur and a \link[readr]{problems} tibble
is created.  The tibble can be the starting point to decide upon the columns
that require updating.

\code{spec_update} is a closure that contains two parts.
\itemize{
  \item An inner function, \code{update_}, that updates the specification by
  setting the \code{class} attribute for the given column.
  \item The enclosing environment that contains the specification to be
  updated and contains a call to \link[purrr]{invoke_rows} to drive
  iteration.
}
}
\examples{
test_df <- readr::read_csv("a,b,c\\n1,2,3\\n4,5,6")
test_spec <- readr::spec(test_df)

## returns
##   a = col_integer()
##   b = col_integer()
##   c = col_integer()

## update columns a and b to be doubles instead of integers
col_spec_df <- tibble::tribble(
  ~col_name, ~col_type,
  "a", "double",
  "b", "double"
)

## update the specification
test_spec_updated <- spec_update(test_spec, col_spec_df)

## re-read with new column spec
test_updated <- readr::read_csv("a,b,c\\n1,2,3\\n4,5,6",
                                col_types = test_spec_updated)

}

